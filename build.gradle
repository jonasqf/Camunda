buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
        classpath "gradle.plugin.com.github.viswaramamoorthy:gradle-util-plugins:0.1.0-RELEASE"
    }
}

plugins {
    id 'java'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'template-camunda'
    version = "${currentVersion}-${currentBuild}"
}

mainClassName = 'br.com.template.curso.camunda.Application'
group = 'br.template.curso.murilo'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.RELEASE'
    }
}

dependencies {

        compile group: 'org.springframework.boot', name: 'spring-boot-starter'
        testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
        testCompile('org.junit.jupiter:junit-jupiter-params:5.2.0')
        testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
        testCompile "org.mockito:mockito-core:2.+"
        testCompile('org.mockito:mockito-junit-jupiter:2.18.3')
        testCompile('org.springframework.boot:spring-boot-starter-test')
        
        compile "io.springfox:springfox-swagger2:2.9.2"
		compile "io.springfox:springfox-swagger-ui:2.9.2"

        compile('org.camunda.bpm.extension.swagger:camunda-bpm-swagger-json:7.8.0')
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile("org.springframework.boot:spring-boot-starter-web:2.0.5.RELEASE")
        compile("org.springframework.boot:spring-boot-starter:2.0.5.RELEASE")
        // Necessario para configurar banco
        // compile("org.springframework.boot:spring-boot-starter-jdbc:2.0.5.RELEASE")
		compile('org.springframework.cloud:spring-cloud-starter-config')
        
        compile('org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter:3.0.0')
        compile('org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:3.0.0')
        compile('org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:3.0.0')
        compile("org.camunda.bpm:camunda-engine-plugin-spin:7.9.0")
        compile("org.camunda.spin:camunda-spin-core")
        compile("org.camunda.spin:camunda-spin-dataformat-json-jackson:1.6.3")
        compile('org.springframework.cloud:spring-cloud-starter-stream-kafka')

        compile("com.squareup.okhttp3:okhttp:3.9.1")
        compile("com.jayway.jsonpath:json-path:2.0.0")
        // compile('mysql:mysql-connector-java:8.0.11')
        // compile('org.camunda.bpm.identity:camunda-identity-ldap:7.9.0')
        compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.0.1.RELEASE'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
        compile('org.apache.commons:commons-lang3:3.7')
        compile("org.springframework.kafka:spring-kafka:2.1.12.RELEASE")

        compile group: 'com.h2database', name: 'h2', version: '1.4.196'

        implementation("org.springframework.cloud:spring-cloud-starter-openfeign:2.1.3.RELEASE")

        testCompile 'com.h2database:h2:1.4.194'
        testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: '2.19.0'
        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.22.0'
        testCompile 'io.rest-assured:rest-assured:3.1.1'


}

if (!project.hasProperty("ENV_TYPE")){
    ext.ENV_TYPE = "dev"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

processResources {
    def versionPropsFile = file('src/main/resources/version.properties')
    if (!versionPropsFile.exists()) {
        versionPropsFile.createNewFile()
    }
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionProps['version'] = "${currentVersion}".toString()
        versionProps['build.number'] = "${currentBuild}".toString()
        versionProps['build.date'] = new Date().format('dd/MM/yyyy HH-mm-ss')
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}